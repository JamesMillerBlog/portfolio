(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _animationFunctions = require('./modules/5animationFunctions');

var Portfolio = new _animationFunctions.animationFunctions();

$(document).ready(function () {
	//make sure that all gifs are loaded first
	Portfolio.loadGifs();

	//when all navigation images are loaded, call Portfolio.checkPositions()
	$('.backgroundImage').imagesLoaded().done(function (instance) {
		Portfolio.checkPositions();
	});
	// when browser is resized, call Portfolio.checkPositions()
	$(window).resize(function () {
		Portfolio.checkPositions();
		Portfolio.mousePos.allowAnimation = false;
		Portfolio.page.lastScrolled = '';
		Portfolio.checkWidth();
	});

	$(window).on("orientationchange", function (event) {
		Portfolio.checkPositions();
	});

	// on mouse over of navigation button
	$(".animatingPage").mouseenter(function () {
		Portfolio.page.isHover = $(this).attr('id');
		//Detect what navigation button is being hovered, move the background to center the selected page 
		for (var pageNumber = 0; pageNumber < Portfolio.totalNumberOfItems(); pageNumber++) {
			if (Portfolio.page.isHover == 'portfolio' + pageNumber + 'page' && Portfolio.page.lastScrolled != '' && Portfolio.mousePos.allowAnimation == true) Portfolio.scrollPortfolio(Portfolio.page.isHover, pageNumber - 1);
		}
	});
	//on mouse click
	$(".animatingPage").click(function () {
		if (Portfolio.page.isHover == "container" && Portfolio.isMobile) Portfolio.openPortfolio(Portfolio.video.wasPlayed);

		if (Portfolio.isTablet) {}
		//open video full screen for ipad


		//open the selected portfolio item
		for (var pageNumber = 0; pageNumber < Portfolio.totalNumberOfItems(); pageNumber++) {
			if (Portfolio.page.isHover == 'portfolio' + pageNumber + 'page' && Portfolio.page.lastScrolled != '') Portfolio.openPortfolio(Portfolio.page.isHover);
		}
	});

	$("#videoExit").click(function () {
		Portfolio.exitFullScreen();
	});

	//on mouse out of navigation button
	$(".animatingPage").mouseleave(function () {
		// console.log("Portfolio.page.lastScrolled = " + Portfolio.page.lastScrolled);
		if (Portfolio.page.lastScrolled != 'container') Portfolio.resetToHome(Portfolio.page.isHover);
	});

	$(document).keyup(function (e) {
		if (e.keyCode === 27) exitFullScreen();
	});

	$("html").keypress(function (event) {
		for (Portfolio.invitation.lowerCase = 0; Portfolio.invitation.lowerCase < Portfolio.invitation.keyboardArr.length; Portfolio.invitation.lowerCase += 2) {
			Portfolio.invitation.upperCase = Portfolio.invitation.lowerCase + 1;
			Portfolio.invitation.count++;
			Portfolio.page.lastClicked = "portfolio" + Portfolio.invitation.count + "page";
			Portfolio.invitation.keyboardEvent = event.which;
			Portfolio.mousePos.currentPosX = -Portfolio.browserSize()[0];
			Portfolio.mousePos.currentPosY = -Portfolio.browserSize()[1];
			Portfolio.triggerResponse(Portfolio.page.lastClicked, Portfolio.invitation.keyboardEvent);
		}
		// console.log(keyboardEvent);
	});

	Portfolio.loadIframes();
});

},{"./modules/5animationFunctions":6}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*jslint browser:true*/
/*global window*/

//** SET UP ALL VARIABLES **//

var Variables = exports.Variables = function () {
	function Variables() {
		_classCallCheck(this, Variables);

		this.init();
		this.loadPercentage = 0;

		this.browser = {
			greaterThanResizer: [1024, 900, 551, 0],
			lesserThanResizer: [99999999, 1024, 900, 550]
		};

		this.animationPositions = {
			portfolio1: [.83333333333333333, .7],
			portfolio2: [1.16, .7],
			portfolio3: [.83333333333333333, 1.3],
			portfolio4: [1.16, 1.3],
			portfolio5: [1, .6],
			portfolio6: [.76923072999, 1],
			portfolio7: [1.24, 1],
			portfolio8: [1, 1.4]
		};

		this.gif = {
			backgroundWSize: 0,
			backgroundHSize: 0,
			// store values to decide the size of selected and non selected nav buttons
			growWSize: 0,
			shrinkWSize: 0,
			backgroundWImageResizerArr: [7, 7, 5, 3.3],
			backgroundHImageResizerArr: [5, 6, 7, 3.5],
			outerGridWSize: 0,
			outerGridHSize: 0,
			outerGridYPos: 0,
			innerGridHSize: 0,
			innerGridYPos: 0,
			centerGridHSize: 0
		};

		this.hitBoxPosAndSizes = {
			desktop: {
				topPagePos: 0.5,
				leftPagePos: 0.76,
				rightPagePos: 1.675,
				bottomPagePos: 1.7,
				leftCornerPos: 1.5,
				rightCornerPos: 1.734,
				centralPos: 1.272,
				middlePagePos: 1.32
			},
			smallDesktop: {
				topPagePos: 0.58,
				leftPagePos: 0.72,
				rightPagePos: 1.72,
				bottomPagePos: 1.74,
				leftCornerPos: 1.5,
				rightCornerPos: 1.77,
				centralPos: 1.4,
				middlePagePos: 1.345
			},
			tablet: {
				topPagePos: 0.65,
				leftPagePos: 0.42,
				rightPagePos: 1.78,
				bottomPagePos: 1.75,
				leftCornerPos: 2.3,
				rightCornerPos: 1.77,
				centralPos: 1.4,
				middlePagePos: 1.375
			},
			mobile: {
				topPagePos: 0.22,
				leftPagePos: 0.42,
				rightPagePos: 1.78,
				bottomPagePos: 1.635,
				leftCornerPos: 8,
				rightCornerPos: 1.66,
				centralPos: 1.348,
				middlePagePos: 1.375
			},
			newimageResizingarr: [this.newDesktopImageSizes = [], this.newSmallDesktopImageSizes = [], this.newTabletImageSizes = [], this.newMobileImageSizes = []]
		};

		this.page = {
			height: 0,
			width: 0,
			xPosition: 0,
			yPosition: 0,
			// store the last scrolled item
			lastScrolled: 'newUser',
			// variable to check what is being hovered on, set up automatically as container
			isHover: 'container',
			lastClicked: ''
		};

		this.heroText = {
			grownChars: 0,
			currentHero: 0,
			options: ["James Miller", "Design", "Creative", "Technology", "Electronics", "Node", "Ideation", "Arduino", "Javascript", "Interactive", "Gamification", "Innovation", "Installations", "Prototyping", "Experiential", "Products"],
			heroTotalTextWidth: 0
		};

		this.invitation = {
			lowerCase: null,
			upperCase: null,
			count: 0,
			keyboardArr: [/*a*/97, /*A*/65, /*b*/98, /*B*/66, /*c*/99, /*C*/67, /*d*/100, /*D*/68, /*e*/101, /*E*/69, /*f*/102, /*F*/70, /*g*/103, /*G*/71, /*h*/104, /*H*/72, /*m*/109, /*M*/77],
			keyboardEvent: null
		};
	}

	_createClass(Variables, [{
		key: 'init',
		value: function init() {
			//setting up mobile device if statements by detecting touch availability
			var has_touch = 'ontouchstart' in document.documentElement;
			//adjust the below variables to select mobiles and tablets
			var isTablet = /Tablet|ipad/i.test(navigator.userAgent.toLowerCase());
			var isMobile = /webos|iphone|blackberry|ipod|android. +mobile|windows phone/i.test(navigator.userAgent.toLowerCase());
			// Inject YouTube API script asynchronously
			var tag = document.createElement('script');
			tag.src = "//www.youtube.com/player_api";
			var firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
		}
	}]);

	return Variables;
}();

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.LoadingFunctions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _vars = require('./1vars');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// //** LOAD IN ALL IMAGES **//
// //CHANGE THIS FILE TO A PAGELOADER.JS
// // PUT ALL FUNCITIONS FROM VARS.JS IN HERE
//LoadingFunctions
var LoadingFunctions = exports.LoadingFunctions = function (_Variables) {
	_inherits(LoadingFunctions, _Variables);

	function LoadingFunctions() {
		_classCallCheck(this, LoadingFunctions);

		return _possibleConstructorReturn(this, (LoadingFunctions.__proto__ || Object.getPrototypeOf(LoadingFunctions)).call(this));
	}

	_createClass(LoadingFunctions, [{
		key: 'browserSize',
		value: function browserSize() {
			return [$(window).width(), $(window).height()];
		}
	}, {
		key: 'browserResizer',
		value: function browserResizer() {
			return [this.browser.greaterThanResizer, this.browser.lesserThanResizer];
		}
	}, {
		key: 'portfolioMoveValue',
		value: function portfolioMoveValue(xpos, ypos, portfolioItem) {
			return [xpos * this.animationPositions['portfolio' + (portfolioItem + 1)][0] + 'px', ypos * this.animationPositions['portfolio' + (portfolioItem + 1)][1] + 'px'];
		}
	}, {
		key: 'totalNumberOfItems',
		value: function totalNumberOfItems() {
			return Object.keys(this.animationPositions).length + 1;
		}
	}, {
		key: 'calcGifSizes',
		value: function calcGifSizes(width, height) {
			this.gif.backgroundWSize = width, this.gif.backgroundHSize = height;
			return [this.gif.backgroundWSize, this.gif.backgroundHSize];
		}
	}, {
		key: 'calcHitBoxSizes',
		value: function calcHitBoxSizes() {
			//loop through each of the screen sizes for hitbox arrays
			for (var o = 0; o < Object.keys(this.hitBoxPosAndSizes).length - 1; o++) {
				//loop through arrays of devices that can be used
				var userDevice = Object.keys(this.hitBoxPosAndSizes)[o];
				//the targetted device whose portfolio hitbox sizes will be defined
				var deviceHitBoxSize = this.hitBoxPosAndSizes[userDevice];
				//set the height of all large hit boxes heights
				deviceHitBoxSize['largeHitBoxHeight'] = this.gif['backgroundHSize'] * 4;
				//set the height of all large hit boxes widths
				deviceHitBoxSize['largeHitBoxWidth'] = this.gif['backgroundWSize'] * 4;
				//set the height of desktop med hit boxes widths
				if (userDevice == "desktop") deviceHitBoxSize['medHitBoxWidth'] = this.gif['backgroundWSize'] * 3;
				//set the height of small desktop med hit boxes widths
				else if (userDevice == "smallDesktop") deviceHitBoxSize['medHitBoxWidth'] = this.gif['backgroundWSize'] * 1.5;
					//set the height of tablet or mobile med hit boxes widths
					else if (userDevice == "tablet" || userDevice == "mobile") deviceHitBoxSize['medHitBoxWidth'] = this.gif['backgroundWSize'] * 1.5;
				//set the height of all small hit boxes heights
				deviceHitBoxSize['smallHitBoxHeight'] = this.gif['backgroundHSize'] * 1.8;
				//set the height of all but mobile small hit boxes widths
				if (userDevice == "desktop" || userDevice == "smallDesktop" || userDevice == "tablet") deviceHitBoxSize['smallHitBoxWidth'] = this.gif['backgroundWSize'] * 2;
				//set the height of only mobile small hit boxes widths
				else if (userDevice == "mobile") deviceHitBoxSize['smallHitBoxWidth'] = this.gif['backgroundWSize'] * 1.348;
				//store values of position + sizes of hit boxes from the objects
				var devicePositionMaths = Object.values(this.hitBoxPosAndSizes)[o];
				//clear current set values in the image resizing array
				this.hitBoxPosAndSizes.newimageResizingarr[o] = [];
				//for each value in each device object
				for (var k = 0; k < Object.keys(devicePositionMaths).length; k++) {
					//store each individual value from the device size object
					var positionMathValues = Object.values(devicePositionMaths)[k];
					//push those values into the new image resizing array
					this.hitBoxPosAndSizes.newimageResizingarr[o].push(positionMathValues);
				}
			}
			//return the new sizes and positions of all hitboxes
			return this.hitBoxPosAndSizes.newimageResizingarr;
		}
		//** CHECK SIZE OF SCREEN + LOAD NEW SIZES **//

	}, {
		key: 'loadHitBoxPosAndSize',
		value: function loadHitBoxPosAndSize() {
			var currentSize;
			var browserResizingOptions = this.browserResizer()[0].length;
			//for each screen size (4), set the size of all hit boxes based on the screen size
			for (var x = 0; x < browserResizingOptions; x++) {
				//based on what screen size you are on, load in different arrays that resize the divs on the screen
				var currentBrowserSizeX = this.browserSize()[0];
				var currentBrowserSizeY = this.browserSize()[1];
				var lesserThanValue = this.browserResizer()[0][x];
				var greaterThanValue = this.browserResizer()[1][x];
				if (currentBrowserSizeX > lesserThanValue && currentBrowserSizeX < greaterThanValue) {
					//set the size of all the gifs
					if (!this.isMobile && !this.isTablet) {
						this.calcGifSizes($('#homepage').width() / this.gif.backgroundWImageResizerArr[x], $('#homepage').height() / this.gif.backgroundHImageResizerArr[x]);
						//set the current size of the content based on what size screen was loaded
						currentSize = this.calcHitBoxSizes()[x];
					}
					//if tablet 
					else if (this.isTablet) {
							//set the sizes to load the tablet array
							this.calcGifSizes($('#homepage').width() / this.gif.backgroundWImageResizerArr[2], $('#homepage').height() / this.gif.backgroundHImageResizerArr[2]);
							//load the tablet array
							currentSize = this.calcHitBoxSizes()[2];
						}
						//if mobile 
						else if (this.isMobile) {
								// set the sizes to load the mobile array
								this.calcGifSizes($('#homepage').width() / this.gif.backgroundWImageResizerArr[3], $('#homepage').height() / this.gif.backgroundHImageResizerArr[3]);
								// load the mobile array
								currentSize = this.calcHitBoxSizes()[3];
							}
				}
			}
			//return the size and positions of all hitboxs based on screen size
			return currentSize;
		}
		// ** SORT POSITION DATA FROM ARRAY AND ASSIGN NEW PAGE POSITIONS **

	}, {
		key: 'calcPagePosAndSizes',
		value: function calcPagePosAndSizes(calculatedVals) {
			//store the total length of values within desktopImageSizes
			var desktopImageSizesLength = this.calcHitBoxSizes()[0].length;
			var hitBoxSizeAndPos = [];
			var currentBrowserSizeX = this.browserSize()[0];
			var currentBrowserSizeY = this.browserSize()[1];

			//STORE NAV HEIGHT, NAV WIDTH, NAV MARGIN LEFT + TOP IN OBJECT
			for (var resizeNumber = 0; resizeNumber < desktopImageSizesLength; resizeNumber++) {
				//store chosen array data in a new array
				hitBoxSizeAndPos[resizeNumber] = calculatedVals[resizeNumber];
				//set the height of all the content
				this.page.height = [hitBoxSizeAndPos[8], hitBoxSizeAndPos[8], hitBoxSizeAndPos[8], hitBoxSizeAndPos[8], hitBoxSizeAndPos[8], hitBoxSizeAndPos[11], hitBoxSizeAndPos[11], hitBoxSizeAndPos[8]];
				//set the width of all the content
				this.page.width = [hitBoxSizeAndPos[9], hitBoxSizeAndPos[9], hitBoxSizeAndPos[9], hitBoxSizeAndPos[9], hitBoxSizeAndPos[10], hitBoxSizeAndPos[9], hitBoxSizeAndPos[9], hitBoxSizeAndPos[10]];
				//set the margin left
				this.page.xPosition = [currentBrowserSizeX / hitBoxSizeAndPos[4], currentBrowserSizeX * hitBoxSizeAndPos[5], currentBrowserSizeX / hitBoxSizeAndPos[4], currentBrowserSizeX * hitBoxSizeAndPos[5], currentBrowserSizeX * hitBoxSizeAndPos[6], currentBrowserSizeX * hitBoxSizeAndPos[1], currentBrowserSizeX * hitBoxSizeAndPos[2], currentBrowserSizeX * hitBoxSizeAndPos[6]];
				//set the margin top of all the content
				this.page.yPosition = [currentBrowserSizeY * hitBoxSizeAndPos[0], currentBrowserSizeY * hitBoxSizeAndPos[0], currentBrowserSizeY * hitBoxSizeAndPos[3], currentBrowserSizeY * hitBoxSizeAndPos[3], currentBrowserSizeY * hitBoxSizeAndPos[0], currentBrowserSizeY * hitBoxSizeAndPos[7], currentBrowserSizeY * hitBoxSizeAndPos[7], currentBrowserSizeY * hitBoxSizeAndPos[3]];
			}
		}
	}, {
		key: 'setPageSizeAndPos',
		value: function setPageSizeAndPos() {
			//for each portfolio item on the page, resize and place each item based on screen size
			for (var pageNumber = 0; pageNumber < this.page.xPosition.length; pageNumber++) {
				$('#portfolio' + (pageNumber + 1) + 'page').css({ 'height': this.page.height[pageNumber] + 'px', 'width': this.page.width[pageNumber] + 'px', 'margin-left': this.page.xPosition[pageNumber] + 'px', 'margin-top': this.page.yPosition[pageNumber] + 'px' });
			}
		}
	}, {
		key: 'setGifGrid',
		value: function setGifGrid() {
			//SET GRID SIZE AND POSITION
			this.gif.outerGridWSize = $('#outerBtnHolder').width(), this.gif.outerGridHSize = $('#outerBtnHolder').height(), this.gif.innerGridHSize = $('#innerBtnHolder').height(), this.gif.centerGridHSize = $('#middleImages').height();
			this.gif.outerGridYPos = ($('#homepage').height() - $('#outerBtnHolder').height()) / 2, this.gif.innerGridYPos = (this.gif.outerGridHSize - this.gif.innerGridHSize) / 2;
			//reset and re-center all postions of all content
			$('#outerBtnHolder').css({ 'width': '', 'height': '', 'top': this.gif.outerGridYPos + 'px', 'margin-left': '', 'margin-right': '', 'left': '', 'right': '' }), $('#innerBtnHolder').css({ 'width': '', 'height': '', 'margin-left': '', 'margin-right': '', 'left': '', 'right': '', 'top': this.gif.innerGridYPos, 'bottom': '' });
			$('#middleImages').css({ 'top': (this.gif.innerGridHSize - this.gif.centerGridHSize) / 2 + 'px' });
		}
	}, {
		key: 'setGifSizes',
		value: function setGifSizes() {
			//set the size of the gifs based on the screen size
			if (this.browserSize()[0] < 1900) $('.backgroundImage').css({ 'width': this.gif['backgroundWSize'] + 'px ', 'height': this.gif['backgroundHSize'] + 'px' });else if (this.browserSize()[0] > 1900 || this.browserSize()[1] > 1100) $('.backgroundImage').css({ 'width': this.gif['backgroundWSize'] / 1.5 + 'px ', 'height': this.gif['backgroundHSize'] / 1.5 + 'px' });
			// Selected page background image grows by 1.2 times its current size and other pages have their size divided by 1.8
			this.gif.growWSize = this.gif['backgroundWSize'] * 1.3, this.gif.shrinkWSize = this.gif['backgroundWSize'] / 1.9;
		}
	}, {
		key: 'loadGifs',
		value: function loadGifs() {
			$.fn.bgLoaded = function (custom) {
				var self = this;

				// Default plugin settings
				var defaults = {
					afterLoaded: function afterLoaded() {
						this.addClass('bg-loaded');
					}
				};

				// Merge default and user settings
				var settings = $.extend({}, defaults, custom);

				// console.log("you're all penus's")
				// Loop through element
				self.each(function () {
					var $this = $(this),
					    bgImgs = $this.css('background-image').split(', ');
					$this.data('loaded-count', 0);

					$.each(bgImgs, function (key, value) {
						var img = value.replace(/^url\(["']?/, '').replace(/["']?\)$/, '');
						$('<img/>').attr('src', img).load(function () {
							$(this).remove(); // prevent memory leaks
							$this.data('loaded-count', $this.data('loaded-count') + 1);
							if ($this.data('loaded-count') >= bgImgs.length) {
								settings.afterLoaded.call($this);
							}
						});
					});
				});
			};
		}
	}, {
		key: 'startWebsite',
		value: function startWebsite() {
			self = this;
			$("#loadScreen, #loadPercentage").stop().animate({ 'opacity': 0 }, { duration: 2000,
				specialEasing: {
					width: "linear",
					height: "easeOutBounce"
				}, complete: function complete() {
					// var v = window.document.createElement("video");
					//if there is a video that can be played, the window size is for desktops and if the use has just loaded the page then play video. 
					if (!!document.getElementById("startUpVid").canPlayType == true && self.browserSize()[0] > 1024 && self.page.lastScrolled == "newUser") self.animateHome(); //change this to animateHome when not in dev mode
					//else load the page without video
					else if (!!document.getElementById("startUpVid").canPlayType == false || self.browserSize()[0] < 1024 || self.isMobile) self.staticHome();
				} });
		}
	}]);

	return LoadingFunctions;
}(_vars.Variables);

},{"./1vars":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VideoLoader = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _pageLoader = require('./2pageLoader');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VideoLoader = exports.VideoLoader = function (_LoadingFunctions) {
  _inherits(VideoLoader, _LoadingFunctions);

  function VideoLoader() {
    _classCallCheck(this, VideoLoader);

    var _this = _possibleConstructorReturn(this, (VideoLoader.__proto__ || Object.getPrototypeOf(VideoLoader)).call(this));

    _this.youtubeVidArr = ['abU5I9Tj6ZU', 'yVKqqdlHPLI', 'AlvdRkRewvA', 'K3N18cqnzHg', 'd_NQcNYMKG8', '8ycTf2TDH_I', 'Swuka5XJRcw', 'wviBk2BYAzw', '5hHonl2hmiU'];

    _this.video = {
      // var to track if a video has been clicked
      clicked: false,
      //stores the latest selected video for iphones
      lastVideo: null,
      // a counter to see how many videos have been loaded
      isLoaded: 0,
      //boolean to allow videos to be played once loaded
      isReady: false,
      //the number of videos that will be loaded
      videoList: null,
      //video players are stored in this array
      players: [],
      //video youtubeids
      playerYoutubeIds: [],
      ID: '',
      //full screen vid player
      player: null,
      myPlayerState: null,
      //a variable to store previously played video when on mobile
      wasPlayed: null,
      //variable to store whether the video is playing or not
      selectedVidLoader: 0,
      //variable to store the state of the mobile device video player
      videoLoaderState: null
    };
    return _this;
  }

  _createClass(VideoLoader, [{
    key: 'loadIframes',
    value: function loadIframes() {
      for (var x = 0; x < this.youtubeVidArr.length; x++) {
        if (x == 0) $("#viewport").append('<iframe id = "fullscreenVideoPlayer" src="https://www.youtube.com/embed/' + this.youtubeVidArr[x] + '?enablejsapi=1&loop=1&modestbranding=1&playlist=' + this.youtubeVidArr[x] + '&rel=0&showinfo=0"></iframe>');else $("#portfolio" + x + "page .videoPlayer").append('<iframe src="https://www.youtube.com/embed/' + this.youtubeVidArr[x] + '?enablejsapi=1&loop=1&modestbranding=1&playlist=' + this.youtubeVidArr[x] + '&rel=0&showinfo=0" frameborder="0" allowfullscreen id="player' + x + '" class = "yPlayer" width="560" height="315"></iframe>');
        $("#loadPercentage p").html((this.loadPercentage += 5) + '%');
      }
    }
  }, {
    key: 'createPortfolioPlayers',
    value: function createPortfolioPlayers(playerInfo, idNumber, noOfVideos) {
      var src = $("#" + playerInfo.id).attr('src');
      this.YouTubeGetID(src);
      this.video.playerYoutubeIds[idNumber] = this.video.ID;
      self = this;
      // console.log("player info "+ playerInfo.id+ " = " +idNumber);
      // if(idNumber == noOfVideos-1) console.log('ALL IS LOADED!');
      return new YT.Player(playerInfo.id, {
        events: {
          'onReady': self.onPortfolioPlayerReady,
          'onStateChange': self.onPortfolioPlayerStateChange
        }
      });
    }
  }, {
    key: 'loadFullScreenVideoPlayer',
    value: function loadFullScreenVideoPlayer() {
      self = this;
      this.video.player = new YT.Player('fullscreenVideoPlayer', {
        height: '100%',
        width: '100%',
        // videoId: 'M7lc1UVf-VE',
        events: {
          'onReady': self.onFullScreenPlayerReady,
          'onStateChange': self.onFullScreenPlayerStateChange
        }
      });
    }
  }, {
    key: 'onFullScreenPlayerReady',
    value: function onFullScreenPlayerReady(event) {
      // var playerID = YT.get('#player3');
      // alert(playerID)
    }
  }, {
    key: 'onPortfolioPlayerReady',
    value: function onPortfolioPlayerReady(event) {
      //bind events
      self.video.isLoaded++;
      var src = $('iframe', this).attr('src');
      // console.log("video id = "+playerInfoID);
      event.target.mute();
      console.log('isLoaded = ' + self.video.isLoaded);
      console.log('videoList = ' + self.video.videoList);
      $("#loadPercentage p").html((self.loadPercentage += 6) + '%');
      if (self.video.isLoaded == self.video.videoList) {
        // YouTubeGetID("https://www.youtube.com/embed/abU5I9Tj6ZU?enablejsapi=1&loop=1&modestbranding=1&playlist=abU5I9Tj6ZU&rel=0&showinfo=0");
        $("#loadPercentage p").html((self.loadPercentage += 7) + '%');
        console.log("videos ready");
        self.video.isReady = true;

        self.startWebsite();
      }
    }
    //loop through and pause all videos

  }, {
    key: 'pauseAllVideos',
    value: function pauseAllVideos() {
      for (var x = 0; x < this.video.videoList; x++) {
        this.video.players[x].pauseVideo();
      }
    }
  }, {
    key: 'onPortfolioPlayerStateChange',
    value: function onPortfolioPlayerStateChange(event) {
      Portfolio.video.myPlayerState = event.data;
      if (Portfolio.page.isHover != 'container' && Portfolio.video.isReady == true) Portfolio.animateIn();
      //if video is played on mobile
      if (Portfolio.video.myPlayerState == 1) if (Portfolio.isMobile) Portfolio.video.players[Portfolio.video.lastVideo].seekTo(0).unMute();
      //if video is paused or stopped on mobile
      if (Portfolio.video.myPlayerState == 2 || Portfolio.video.myPlayerState == 0) if (Portfolio.isMobile) Portfolio.video.players[Portfolio.video.lastVideo].mute();
    }
  }, {
    key: 'onFullScreenPlayerStateChange',
    value: function onFullScreenPlayerStateChange(event) {
      Portfolio.video.videoLoaderState = event.data;
      if (Portfolio.video.selectedVidLoader == 1 && Portfolio.video.videoLoaderState == 3) Portfolio.video.player.unMute().playVideo();
      if (Portfolio.video.videoLoaderState == 1) Portfolio.video.selectedVidLoader++;
    }
  }, {
    key: 'YouTubeGetID',
    value: function YouTubeGetID(url) {
      this.video.ID = '';
      url = url.replace(/(>|<)/gi, '').split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/);
      if (url[2] !== undefined) {
        this.video.ID = url[2].split(/[^0-9a-z_\-]/i);
        this.video.ID = this.video.ID[0];
      } else {
        this.video.ID = url;
      }
      return this.video.ID;
    }
  }, {
    key: 'fullScreenMobile',
    value: function fullScreenMobile() {
      this.video.players[this.video.lastVideo].playVideo();
      this.video.wasPlayed = this.video.lastVideo;
      staticHome();
      this.video.clicked = false;
    }
  }, {
    key: 'fullScreenVideoPlayer',
    value: function fullScreenVideoPlayer(portfolioSelection) {
      self = this;
      if (this.video.playerYoutubeIds[portfolioSelection] != this.video.wasPlayed) this.video.player.loadVideoById(this.video.playerYoutubeIds[portfolioSelection]);else this.video.player.unMute().playVideo();
      this.video.wasPlayed = this.video.playerYoutubeIds[portfolioSelection];
      //animate video
      $("#" + this.page.isHover + " .videoContainer").css({ 'height': '100%', 'width': '100%', 'bottom': 0, 'right': 0, 'left': 0, 'top': '0' });
      $("#" + this.page.isHover).css({ 'position': 'fixed' });
      $("#" + this.page.isHover + " .content").css({ 'display': 'none' });
      $("#" + this.page.isHover + " .videoPlayer").css({ 'overflow': 'visible', 'bottom': 0, 'right': 0, 'left': 0, 'top': 0 });
      $("#" + this.page.isHover + " .videoPlayer iframe").css({ 'width': '100%', 'height': '100%', 'bottom': 0, 'right': 0, 'left': 0, 'top': 0 });
      $("#" + Portfolio.page.isHover).stop().animate({ 'width': '100%', 'height': '100%', 'left': 0, 'top': 0, 'right': 0, 'bottom': 0, 'margin-top': 0, 'margin-left': 0 }, { complete: function complete() {
          $("#" + Portfolio.page.isHover).css({ 'z-index': '-1000' });
          $('#fullscreenVideoPlayer').css({ 'display': 'block' });
          $('#container, .animatingPage, iframe').css({ 'display': 'none' });
          $('#fullscreenVideoPlayer, #videoExit').css({ 'display': 'block' });
        } });
      $('#fullscreenVideoPlayer, #videoExit').stop().animate({ 'opacity': '1', 'background-color': "black" });

      this.video.players[portfolioSelection].pauseVideo().seekTo(0);
      if (this.video.selectedVidLoader == 0) {
        this.video.selectedVidLoader++;
      }
    }
  }, {
    key: 'exitFullScreen',
    value: function exitFullScreen() {
      this.video.player.mute().pauseVideo();
      $('#fullscreenVideoPlayer, #videoExit, #container, .animatingPage, #' + this.page.isHover + ' .videoContainer, #' + this.page.isHover + ', #' + this.page.isHover + ' .content, #' + this.page.isHover + ' .videoPlayer, #' + this.page.isHover + ' .videoPlayer iframe, #container, .animatingPage, iframe').css({ 'height': '', 'width': '', 'bottom': '', 'right': '', 'left': '', 'top': '', 'display': '', 'opacity': '', 'overflow': '', 'position': '', 'z-index': '' });
      this.mousePos.allowAnimation = false;
      this.page.lastScrolled = '';
      this.page.isHover = 'container';
      // $("#" + Portfolio.page.isHover + " .videoContainer, #fullscreenVideoPlayer, #videoExit, #container, .animatingPage, #" + Portfolio.page.isHover + " .content", "#" + Portfolio.page.isHover + " .videoPlayer iframe, #" + Portfolio.page.isHover + " .videoPlayer").css({'height': '', 'width':'','bottom':'','right':'','left':'', 'top':'', 'display': '', 'opacity':'', 'overflow': '', 'position':''});
      this.video.clicked = false;
      this.checkPositions();
    }
  }]);

  return VideoLoader;
}(_pageLoader.LoadingFunctions);

// loop through each iframe and create a video player for it


window.onYouTubeIframeAPIReady = function () {
  var iframes = document.querySelectorAll('.yPlayer');
  for (self.video.videoList = 0; self.video.videoList < iframes.length; self.video.videoList++) {
    self.video.players[self.video.videoList] = self.createPortfolioPlayers(iframes[self.video.videoList], self.video.videoList, iframes.length);
  }self.loadFullScreenVideoPlayer();
};

},{"./2pageLoader":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Navigation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _videoLoader = require('./3videoLoader');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//** MOUSE MOVEMENT NAVIGATION **//

var Navigation = exports.Navigation = function (_VideoLoader) {
  _inherits(Navigation, _VideoLoader);

  function Navigation() {
    _classCallCheck(this, Navigation);

    //variables for determining mouse pos
    var _this = _possibleConstructorReturn(this, (Navigation.__proto__ || Object.getPrototypeOf(Navigation)).call(this));

    _this.mousePos = {
      x: null,
      y: null,
      currentPosX: null,
      currentPosY: null,
      //movement strength of background
      movementStrength: 10,
      isAnimating: false,
      allowAnimation: false
    };

    _this.initNav();
    return _this;
  }

  _createClass(Navigation, [{
    key: 'initNav',
    value: function initNav() {
      self = this;
      console.log("neeeewbie");
      // prevent touch screen from srolling 
      $(document).bind('touchmove', function (e) {
        e.preventDefault();
      });
      // Execute on load
      this.checkWidth();

      //if mobile device make background move with accelerometer data
      if (this.has_touch) {
        var deviceMotionHandler = function deviceMotionHandler(eventData) {
          // $('#container').css({'background-color': 'red'});
          //check size of browser and decide background position every time accelerometer data comes in
          this.checkWidth();
          //reduce strength of movement on mobile
          this.mousePos.movementStrength = 3;
          //if landscape reverse y & x values and multiply the data to compensate for screen size, else remain normal
          var deviceY = Math.round(event.accelerationIncludingGravity.y) * ($('.backgroundImage').height() * 3);
          var deviceX = Math.round(event.accelerationIncludingGravity.x) * ($('.backgroundImage').width() * 2);
          if ($(window).height() < $(window).width()) {
            deviceY = Math.round(event.accelerationIncludingGravity.x) * $('.backgroundImage').width();
            deviceX = Math.round(event.accelerationIncludingGravity.y) * $('.backgroundImage').height() * 6;
          }
          //change mouse position to accelerometer data in the checkWidth() function
          this.mousePos.x = deviceX;
          this.mousePos.y = deviceY;
        };

        window.addEventListener('devicemotion', deviceMotionHandler, false);
        ;
      } else {
        //if desktop then use mouse pos to move background
        $("body").mousemove(function (e) {
          self.checkWidth();
          //x & y = mouse position    
          self.mousePos.x = e.pageX;
          self.mousePos.y = e.pageY;
        });
      }
    }
    //check size of browser + mouse position and move background accordingly

  }, {
    key: 'checkWidth',
    value: function checkWidth() {
      //restraining the movement of the background so that it the browser size
      var restrainedBrowserHeight = this.mousePos.movementStrength / $(window).height();
      var restrainedBrowserWidth = this.mousePos.movementStrength / $(window).width();

      //set current position of browser as negative ints, so it can be used to moved via css
      //windowSize variables are referenced from homepage.js
      var backgroundCurrentYPos = -this.browserSize()[1],
          backgroundCurrentXPos = -this.browserSize()[0];

      //creates a pace which is a half of the users mouse speed: currentMousePosX = current mouse position - (window width / 2)
      var currentMousePosY = this.mousePos.y - $(window).height() / 2;
      var currentMousePosX = this.mousePos.x - $(window).width() / 2;

      //decides position: move background down by ((10 / height of browser) * (currentMousePosY speed)) + (the negative height of the browser)
      var newBackgroundPosX = restrainedBrowserWidth * currentMousePosX * -1 + backgroundCurrentXPos;
      var newBackgroundPosY = restrainedBrowserHeight * currentMousePosY * -1 + backgroundCurrentYPos;

      // // set view port as browser size (prevent mobile devices from scrolling)
      // $('#viewport').css({'height':BrowserInfo.browserSize()[1] +'px ', 'width':BrowserInfo.browserSize()[0] + 'px'});

      //send values to other js files that control each page
      if (this.page.lastScrolled != "newUser" && this.page.lastScrolled != "animatingHome") {
        this.updatePosition(newBackgroundPosX, newBackgroundPosY);
      }
    }
  }, {
    key: 'updatePosition',
    value: function updatePosition(posX, posY) {
      //move background container based on mouse positions
      this.mousePos.currentPosX = posX, this.mousePos.currentPosY = posY;
      var currentBrowserSizeX = this.browserSize()[0],
          currentBrowserSizeY = this.browserSize()[1];

      //if animation between navigation buttons isn't happening 
      if (this.isAnimating == false && this.video.clicked == false && currentBrowserSizeY > 550) {
        //detect what navigation button is being scrolled over and adjust maths mouse position accordingly
        for (var pageNumber = 0; pageNumber < this.totalNumberOfItems(); pageNumber++) {
          if (this.page.isHover == 'portfolio' + pageNumber + 'page' && this.page.lastScrolled != '' && this.mousePos.allowAnimation == true) this.scrollingPage(this.page.isHover, pageNumber - 1, currentBrowserSizeX);
        } //if not hovering on a nav button
        if (this.page.isHover == 'container' || currentBrowserSizeX < 1024) {
          //animate based on normal mouse position
          $('#container').css({ 'opacity': 1, 'margin-left': posX + 'px', 'margin-top': posY + 'px' });
          //clear any inline styles on navigation images that were created with js
          if (currentBrowserSizeX < 1900) $('.backgroundImage').css({ 'width': this.gif['backgroundWSize'] + 'px ', 'height': this.gif['backgroundHSize'] + 'px' });else if (currentBrowserSizeX > 1900 || currentBrowserSizeY > 1100) $('.backgroundImage').css({ 'width': this.gif['backgroundWSize'] / 1.5 + 'px ', 'height': this.gif['backgroundHSize'] / 1.5 + 'px' });
          $('#innerBtnHolder').css({ 'width': '', 'height': '', 'margin-left': '', 'margin-right': '', 'left': '', 'right': '', 'bottom': '' });
          $('.videoContainer').css({ 'opacity': '' });
          if (this.page.isHover == 'container') this.page.lastScrolled = 'container', this.mousePos.allowAnimation = true;
        }
        //if the initial start up video played, then hide it to reveal the still jpg
        if ($("video").css('display') === 'block') $('video').css({ 'display': 'none' });
      }
      // console.log("last Scrolled = "+ Portfolio.page.lastScrolled);
      // console.log("is hover = "+ Portfolio.page.isHover);
    }
  }, {
    key: 'scrollingPage',
    value: function scrollingPage(currentHover, posMovement, currentBrowserSizeX) {
      if (currentBrowserSizeX > 1024) $('#container').css({ 'margin-left': this.portfolioMoveValue(this.mousePos.currentPosX, this.mousePos.currentPosY, posMovement)[0], 'margin-top': Portfolio.portfolioMoveValue(this.mousePos.currentPosX, this.mousePos.currentPosY, posMovement)[1] });
    }

    //** CHECK POSITIONS **//

  }, {
    key: 'checkPositions',
    value: function checkPositions() {
      // set size + position of each page within the website container
      var currentBrowserSizeX = this.browserSize()[0];
      var currentBrowserSizeY = this.browserSize()[1];
      $('#homepage').css({ 'margin-left': currentBrowserSizeX + 'px', 'margin-top': currentBrowserSizeY + 'px' });
      // set size + position of background
      $('#container').css({ 'height': currentBrowserSizeY * 3 + 'px ', 'width': currentBrowserSizeX * 3 + 'px', 'margin-left': '-' + currentBrowserSizeX + 'px', 'margin-top': '-' + currentBrowserSizeY + 'px' });
      //resize portfolio pages, once the check size function has calculated positions and heights of hitboxes
      this.calcPagePosAndSizes(this.loadHitBoxPosAndSize());
      this.setGifSizes();
      this.setGifGrid();

      if (this.video.clicked == false) {
        // RESET PORTFOLIO HIT BOXS
        this.setPageSizeAndPos();
        // if the page isn't loading for the first time
        if (this.page.lastScrolled != "newUser") this.resetPositions();else $('#heroText').css({ 'opacity': 0, 'display': 'none' });
        //if resize the browser window whilst scrolled over a menu item then activate complete home page reset
        if (this.page.isHover != 'container' && this.page.lastClicked == '') this.resetToHome('reset');
        // $('#heroText').css({'top':($('#centerImage').height()-$('#heroText').height())/2});
        this.activateHeroAnimation();
      } else {
        //if video has been clicked and page then resized
      }
      if (this.page.lastScrolled == "newUser") $('#topImage, #bottomImage, #portfolio1, #portfolio2, #portfolio3, #portfolio4, #portfolio6, #portfolio7').css({ 'opacity': 0 });
    }
  }, {
    key: 'resetPositions',
    value: function resetPositions() {
      //center the middle two portfolio items
      $('#heroText').css({ 'font-size': $('#centerImage').width() / 8 + 'px', 'top': ($('#centerImage').height() - $('#heroText').height()) / 2 });
      //RESET POSITIONS OF ITEMS ON SCREEN
      $('#container').css({ 'opacity': 1, 'display': 'block' });
      if (!this.isMobile) $("#linksTop, #linksBottom").stop().animate({ 'opacity': 1 });
      $('#heroText').css({ 'opacity': 1, 'display': 'block' });
      $('.videoContainer').css({ 'opacity': 0 });
      $('.content').css({ 'opacity': 0 });
      this.page.lastScrolled = '';
    }
  }, {
    key: 'triggerResponse',
    value: function triggerResponse(newHover, keyp) {
      if (keyp == this.invitation.keyboardArr[this.invitation.lowerCase] || keyp == this.invitation.keyboardArr[this.invitation.upperCase]) {
        var counter = this.invitation.count - 1;
        if (this.video.clicked == false && counter < this.invitation.keyboardArr.length / 2 - 1) {
          if (newHover != this.page.isHover) {
            this.resetToHome(newHover);
            this.page.isHover = newHover;
            this.page.lastScrolled = '#' + newHover.substring(0, 10);
            this.scrollPortfolio(newHover, counter);
          } else this.openPortfolio(this.page.isHover);
        } else this.exitFullScreen();
        if (counter == this.invitation.keyboardArr.length / 2 - 1 && this.page.lastScrolled != '') this.resetToHome(newHover);
      }
      if (this.invitation.count >= this.invitation.keyboardArr.length / 2) this.invitation.count = 0;
    }
  }]);

  return Navigation;
}(_videoLoader.VideoLoader);

},{"./3videoLoader":4}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.animationFunctions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nav = require('./4nav');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var animationFunctions = exports.animationFunctions = function (_Navigation) {
	_inherits(animationFunctions, _Navigation);

	function animationFunctions() {
		_classCallCheck(this, animationFunctions);

		var _this = _possibleConstructorReturn(this, (animationFunctions.__proto__ || Object.getPrototypeOf(animationFunctions)).call(this));

		_this.charLength;
		_this.charLengthParser;
		return _this;
	}

	//** START ON STATIC SCREEN **//


	_createClass(animationFunctions, [{
		key: 'staticHome',
		value: function staticHome() {
			// hide video
			console.log("static home triggered!");
			$('video').css({ 'display': 'none' });
			$("#viewport").removeClass("hide");
			$("#loadScreenHolder").addClass("hide").css({ 'display': 'none' });
			//add a background image to the home page
			// $("#centerImage").addClass("designBackground");
			$('#heroText').css({ 'font-size': $('#centerImage').width() / 8 + 'px', 'display': 'block', 'opacity': 1 });
			//reset all nav button positions
			$('#topImage, #bottomImage, #portfolio1, #portfolio2, #portfolio3, #portfolio4, #portfolio5, #portfolio6, #portfolio7, #portfolio8').css({ 'margin-top': '', 'margin-left': '', 'margin-right': '', 'margin-bottom': '', 'opacity': '', 'display': '' });
			//activate navigation movement by clearing Portfolio.page.lastScrolled and resetting Portfolio.page.isHover + Portfolio.isAnimating
			this.page.lastScrolled = '';
			// console.log("Portfolio.page.lastScrolled = " + this.page.lastScrolled);
			this.page.isHover = 'container';
			this.isAnimating = false;
			//allow nav buttons to be scrolled over by revealing the scroll buttons
			if (this.video.clicked == false) $('.animatingPage').css({ 'display': '' });
			// console.log("static home");
			this.activateHeroAnimation();
		}

		//** START ON ANIMATED SCREEN **//

	}, {
		key: 'animateHome',
		value: function animateHome() {
			self = this;
			console.log("animate home launched!");
			// set video height to half the page
			var videoHeight = ($('#centerImage').height() - $('#centerImage').height() * .7) / 2;
			//disable nav movement
			$("#viewport").removeClass("hide");
			$("#loadScreenHolder").addClass("hide").css({ 'display': 'none' });
			$('#startUpVid').css({ 'display': 'block', 'opacity': 1 });
			document.getElementById('startUpVid').play();
			$('.animatingPage').css({ 'display': 'none' });
			//hide nav button graphics
			$('#topImage').css({ 'margin-top': '20%' });
			$('#portfolio1').css({ 'margin-top': '20%', 'margin-left': '40%' });
			$('#portfolio2').css({ 'margin-top': '20%', 'margin-right': '40%' });
			$('#portfolio3').css({ 'margin-bottom': '20%', 'margin-left': '40%' });
			$('#portfolio4').css({ 'margin-bottom': '20%', 'margin-right': '40%' });
			$('#portfolio6').css({ 'margin-left': '40%' });
			$('#portfolio7').css({ 'margin-right': '40%' });
			$('#bottomImage').css({ 'margin-bottom': '20%' });
			var heroTextHeight = ($('#centerImage').height() - $('#heroText').height()) / 2;
			$('#heroText').css({ 'top': heroTextHeight + 'px' });
			this.page.lastScrolled = 'animatingHome';
			// if(videoYeah.paused){
			// 	staticHome();
			// }
			$(window).resize(function () {
				staticHome();
			});
			// console.log("animate home");
			//set video vertical position and if the video is completed
			console.log("Portfolio.page.lastScrolled = " + this.page.lastScrolled);
			var videoYeah = document.getElementById("startUpVid");
			if (!videoYeah.paused) {
				console.log("Portfolio.page.lastScrolled = " + this.page.lastScrolled);
				$('video').css({ 'top': videoHeight + 'px' }).on('ended', function () {
					if (self.page.lastScrolled == 'animatingHome') {
						console.log('Video has ended!');
						$('video').css({ 'display': 'none' });
						$('#heroText').css({ 'font-size': $('#centerImage').width() / 8 + 'px', 'display': 'block' });
						self.activateHeroAnimation();
						$('#heroText').css({ 'width': self.heroText.heroTotalTextWidth + 'px', 'bottom': 0 + 'px', 'font-size': 0 + 'px', 'padding-top': $('#heroText').height() / 1.5 + 'px', 'padding-left': $('#heroText').width() / 1.5 + 'px' });
						// console.log('width of hero = ' + heroTotalTextWidth + 'px');
						$('#heroText').stop().animate({ 'opacity': 1, 'font-size': $('#centerImage').width() / 8 + 'px', 'padding': 0 + 'px' }, { complete: function complete() {
								//animate text in
								//animate all the nav buttons to their correct positions	  
								$('#topImage').stop().animate({ 'margin-top': '', 'margin-left': '', 'opacity': 1 }, 500);
								$('#portfolio1').stop().animate({ 'margin-top': '', 'margin-left': '', 'opacity': 1 }, 500);
								$('#portfolio2').stop().animate({ 'margin-top': '', 'margin-right': '', 'opacity': 1 }, 500);
								$('#portfolio3').stop().animate({ 'margin-bottom': '', 'margin-left': '', 'opacity': 1 }, 500);
								$('#portfolio4').stop().animate({ 'margin-bottom': '', 'margin-right': '', 'opacity': 1 }, 500);
								$('#portfolio6').stop().animate({ 'margin-left': '', 'opacity': 1 }, 500);
								$('#portfolio7').stop().animate({ 'margin-right': '', 'opacity': 1 }, 500);
								$('#bottomImage').stop().animate({ 'margin-bottom': '', 'opacity': 1 }, 500);
								self.page.lastScrolled = '';
								//reset all variables so that navigation scrolling will work
								self.page.isHover = 'container';
								self.isAnimating = false;
								//after a second, make the social links animate in
								setTimeout(function () {
									$("#linksTop, #linksBottom").stop().animate({ 'opacity': 1 });
									$('.animatingPage').css({ 'display': 'block' });
								}, 1000);
							} });
					}
				});
			}
		}
	}, {
		key: 'activateHeroAnimation',
		value: function activateHeroAnimation() {
			self = this;
			var elem = $('#heroText');
			var charHover, previousCharHover;
			var heroCharNumber = 0,
			    heroSpaceNumber = 0;
			var heroTextHeight = ($('#centerImage').height() - $('#heroCharNumber1').height()) / 2;
			this.heroText.heroTotalTextWidth = 0;
			if (this.heroText.currentHero == 0) $("#heroText").html(this.heroText.options[0]);
			var chars = jQuery.map(elem.text().split(''), function (c) {
				if (c != ' ') {
					heroCharNumber++;
					return '<span class ="heroChar" id = "heroCharNumber' + heroCharNumber + '">' + c + '</span>';
				} else {
					heroSpaceNumber++;
					return '<span id = heroCharSpace>' + c + '</span>';
				}
			});
			if (heroSpaceNumber != 0) this.charLength = chars.length, this.charLengthParser = chars.length - 1;else this.charLength = chars.length + 1, this.charLengthParser = chars.length;
			elem.html(chars.join(''));
			$("#heroCharSpace").css({ 'width': $("#heroCharNumber1").width() + 'px', 'height': $("#heroCharNumber1").height() + 'px' });

			$(".heroChar").mouseenter(function () {
				charHover = $(this).attr('id');
				if ($("#" + charHover).css('opacity') === '1' && self.browserSize()[0] > 1024 && self.isAnimating == false && $('.animatingPage').css('display') === 'block') self.growChar(charHover, self.charLengthParser);
			});

			// $("#centerImage").mouseenter(function(){
			// 	allowAnimation = true;
			// 	console.log("ALLOW ANIMATION");
			// });
			for (var x = 1; x < this.charLength; x++) {
				var heroTextWidth = $('#heroCharNumber' + x).width();
				this.heroText.heroTotalTextWidth += heroTextWidth;
			}
			if (heroSpaceNumber > 0) this.heroText.heroTotalTextWidth = this.heroText.heroTotalTextWidth + $("#heroCharSpace").width();
			$('#heroText').css({ 'height': $('#heroCharNumber1').height() + 'px' });
			$('#heroText').css({ 'top': heroTextHeight + 'px', 'width': this.heroText.heroTotalTextWidth + 'px' });
		}
	}, {
		key: 'growChar',
		value: function growChar(selectedChar, numberOfChars) {
			this.heroText.grownChars++;
			if (this.heroText.grownChars == numberOfChars) this.changeHero();
			$("#" + selectedChar).css({ 'opacity': '.5' });
			$("#" + selectedChar).stop().animate({ 'margin-top': '-20px' }, { complete: function complete() {
					$("#" + selectedChar).stop().animate({ 'margin-top': '0px' });
				} });
		}
	}, {
		key: 'changeHero',
		value: function changeHero() {
			self = this;
			var chosenWord;
			if (this.heroText.currentHero == 0) this.heroText.currentHero++;
			for (var x = 0; x < this.heroText.options.length; x++) {
				if (this.heroText.currentHero == x) chosenWord = this.heroText.options[x];
				if (this.heroText.currentHero == this.heroText.options.length) this.heroText.currentHero = 0, chosenWord = this.heroText.options[0];
			}
			$("#heroText").stop().animate({ 'opacity': '0' }, { complete: function complete() {
					$("#heroText").html(chosenWord);
					$("#heroText").stop().animate({ 'opacity': '1' });
					self.heroText.grownChars = 0;
					self.activateHeroAnimation();
				} });
			this.heroText.currentHero++;
		}
		//** SCROLLING FUNCTION **//
		//Changes the math movement to match what navigation page the user has chosen

	}, {
		key: 'scrollPortfolio',
		value: function scrollPortfolio(hovered, posmovement) {
			self = this;
			//set last scrolled to the div that has just been hovered over
			this.page.lastScrolled = '#' + hovered.substring(0, 10);
			//if the windowsize is desktop, mouse positions values are there, the height of the browser is over 500 and a video hasnt been clicked
			if (this.browserSize()[0] > 1024 && this.browserSize()[1] > 500 && this.video.clicked == false && isNaN(this.mousePos.currentPosX) == false) {
				var scrollMovement = this.portfolioMoveValue(this.mousePos.currentPosX, this.mousePos.currentPosY, posmovement);
				//set animation to true
				this.isAnimating = true;
				//animate the container to the position of the item which was scrolled over, Once selected page is animated then set animation to false
				$('#container').stop().animate({ 'margin-left': scrollMovement[0], 'margin-top': scrollMovement[1] }, { complete: function complete() {
						self.isAnimating = false;
					} });
				//add a class which will alow that div to grow
				$(this.page.lastScrolled).removeClass("backgroundImage").addClass("staticImage");
				//Make the selected pages' content appear
				$(this.page.lastScrolled + 'page .content').stop().animate({ 'opacity': 1 });
				//Make the selected pages background image grow and once the image has grown and if the videos have been loaded, then animate the video in.
				$(".staticImage").stop().animate({ 'width': this.gif.growWSize + 'px' }, { complete: function complete() {
						if (self.video.isReady == true) self.animateIn();
					} });
				//Loop through all other pages and shrink them
				$(".backgroundImage").stop().animate({ 'width': this.gif.shrinkWSize + 'px' });
				$("#linksTop, #linksBottom").stop().animate({ 'opacity': 0 });
			}
		}
		//** ANIMATING VIDEOS ON SCROLL OVER **//

	}, {
		key: 'animateIn',
		value: function animateIn() {
			//set the last video to what you've just scrolled over
			this.video.lastVideo = this.page.lastScrolled.substr(this.page.lastScrolled.length - 1) - 1;
			//play the selected video
			//stops a bug that tries to play a video that doesn't exist
			if (this.video.lastVideo >= 0) this.video.players[this.video.lastVideo].playVideo();
			//if the video is playing and it is currently hidden, then animate it in.
			if (this.video.myPlayerState == 1 && $("#" + this.page.isHover + " .videoContainer").css('opacity') === '0' && this.video.clicked == false) $("#" + this.page.isHover + " .videoContainer").stop().animate({ 'opacity': 1 });
			// $(".staticImage").stop().animate({'opacity': 0});
		}

		//** OPEN VIDEO **//

	}, {
		key: 'openPortfolio',
		value: function openPortfolio(clicked) {
			//if is mobile and previously clicked on the same video
			if (isNaN(this.page.lastScrolled) && this.page.lastScrolled == "container" && this.isMobile) this.video.players[this.video.wasPlayed].unMute().seekTo(0).playVideo();
			//if a video hasn't been clicked yet, the videos have been loaded and the screen height is over 500
			if (this.video.clicked == false && this.video.isReady == true && this.browserSize()[1] > 500) {
				//set the last video to what you've just scrolled over
				this.video.lastVideo = this.page.lastScrolled.substr(this.page.lastScrolled.length - 1) - 1;
				//set up a variable which will be able to full screen the selected video
				var number = clicked.substring(9); //gets the substring from index position 3 to the end
				number = parseInt(number) - 1; //converts to a number
				this.video.selectedVidLoader = 0;
				this.video.clicked = true;
				// var selectedVideo = document.getElementById("player"+ (lastVideo + 1));
				// opens fullscreen video on mobile
				if (this.isMobile) this.fullScreenMobile();
				//full screen the selected video if on a desktop computer
				if (!this.isMobile) this.fullScreenVideoPlayer(number);
			}
		}
	}, {
		key: 'returnToHome',
		value: function returnToHome() {
			// Get the page that was just scrolled out and shrink its background image to its normal size
			$(this.page.lastScrolled).removeClass("staticImage").addClass("backgroundImage");
			// $(Portfolio.page.lastScrolled + 'page .content').stop().animate({"opacity":0});
			$('.videoContainer').stop().animate({ "opacity": 0 });
			//if videos are loaded then pause all of them
			if (this.video.isReady) this.pauseAllVideos();
		}
	}, {
		key: 'scrollOutNav',
		value: function scrollOutNav() {
			self = this;
			// animation starts
			if (!this.isMobile) this.isAnimating = true;
			// console.log("background W size SLUT = " + backgroundWSize+'px');
			if (this.browserSize()[0] < 1900) $(".backgroundImage").stop().animate({ 'width': this.gif['backgroundWSize'] + 'px' });else if (this.browserSize()[0] > 1900 || this.browserSize()[1] > 1100) $(".backgroundImage").stop().animate({ 'width': this.gif['backgroundWSize'] / 1.5 + 'px' });
			//Hide the scrolled out pages content back to opacity 0
			// $('#' +lastPage + ' .content').stop().animate({'opacity': 0});
			$('.content').stop().animate({ 'opacity': 0 });
			//Make the container holding the nav buttons go back to its original size and position
			$('#middleImages').stop().animate({ 'top': (this.gif.innerGridHSize - this.gif.centerGridHSize) / 2 + 'px' });
			$('#innerBtnHolder').stop().animate({ 'top': this.gif.innerGridYPos + 'px' });
			$('#outerBtnHolder').stop().animate({ 'width': this.gif.outerGridWSize + 'px', 'height': this.gif.outerGridHSize + 'px', 'margin-right': '', 'margin-left': '', 'top': this.gif.outerGridYPos + 'px' });
			if (this.page.lastScrolled != 'newUser' && this.video.clicked == false) $("#linksTop, #linksBottom").stop().animate({ 'opacity': 1 });

			if (this.page.lastScrolled == "#portfolio5") {
				$('#portfolio8page').css({ "display": "none" });
				setTimeout(function () {
					$('#portfolio8page').css({ "display": "block" });
				}, 700);
			} else if (this.page.lastScrolled == "#portfolio8") {
				$('#portfolio5page').css({ "display": "none" });
				setTimeout(function () {
					$('#portfolio5page').css({ "display": "block" });
				}, 700);
			}
			//if another navigation item isn't selected, then set hover state to container and animate by normal mouse position
			for (var pageNumber = 1; pageNumber < 8; pageNumber++) {
				if (this.page.isHover != 'portfolio' + pageNumber + 'page') {
					this.page.isHover = 'container';
					if (this.mousePos.allowAnimation == true) $('#container').stop().animate({ 'margin-left': this.mousePos.currentPosX + 'px', 'margin-top': this.mousePos.currentPosY + 'px' }, { complete: function complete() {
							self.isAnimating = false;
						} });
				}
			}
			// console.log("animate page to home position");
		}
	}, {
		key: 'resetScrolledOverItems',
		value: function resetScrolledOverItems() {
			self = this;
			$(this.page.lastScrolled).removeClass("staticImage").addClass("backgroundImage");
			if (this.browserSize()[0] < 1900) $(".backgroundImage").css({ 'width': this.gif['backgroundWSize'] + 'px' });else if (this.browserSize()[0] > 1900 || this.browserSize()[1] > 1100) $(".backgroundImage").css({ 'width': this.gif['backgroundWSize'] / 1.5 + 'px' });
			$('#container').css({ 'opacity': 0, 'margin-left': this.mousePos.currentPosX + 'px', 'margin-top': this.mousePos.currentPosY + 'px' });
			$('.videoContainer').css({ 'opacity': 0 });
			$('.content').css({ 'opacity': 0 });
			// $(Portfolio.page.lastScrolled).css({"opacity":1});
			setTimeout(function () {
				self.isAnimating = false;
				$(self.page.lastScrolled + 'page .content').css({ 'opacity': 0 });
				$('#container').css({ 'opacity': '1', 'margin-left': self.mousePos.currentPosX + 'px', 'margin-top': self.mousePos.currentPosY + 'px' });
				self.page.isHover = 'container';
				self.checkPositions();
				console.log("reset");
				// $('body').css({'background-color': 'orange'});
			}, 50);
		}
		//** RESET TO HOME POSITION **//

	}, {
		key: 'resetToHome',
		value: function resetToHome(lastPage) {
			// if browser is above 1024 (is a desktop) and a video hasn't been clicked
			if (this.video.clicked == false && this.browserSize()[0] > 1024 && !this.isMobile) {
				//shrink all items back to normal home page positions
				this.returnToHome();
				//if you've just scrolled out of a nav button
				if (lastPage != 'reset' && this.page.lastScrolled != '') this.scrollOutNav();
				//if you've just resized the screen.
				else {
						//if the user isn't using special electronics invitation (keyboard inputs)
						if (this.page.lastClicked == '') {
							if (lastPage == 'reset') this.resetScrolledOverItems();
							//else if full screen is exited	    
							else this.page.isHover = 'container';
							//if the user is navigating the site with the electronics invitation (keyboard inputs)
						} else {
							this.page.lastScrolled = 'container';
							this.page.isHover = 'container';
							this.checkPositions();
						}
					}
				//if a video has been clicked and then you resize the screen, then return to the standard screen navigation
			} else {
				// $('body').css({'background-color': 'red'});
				// players[lastVideo].stopVideo();
				if (!this.isMobile && !this.isTablet) this.page.isHover = 'container';
			}
		}
	}]);

	return animationFunctions;
}(_nav.Navigation);

},{"./4nav":5}]},{},[1]);
