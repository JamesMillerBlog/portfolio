(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _ux = require('./modules/ux.js');

$(document).ready(function () {
	(0, _ux.start)(); // start pc experience
});

},{"./modules/ux.js":4}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setup = undefined;

var _heroTextAnimations = require("./heroTextAnimations.js");

var heroText = _interopRequireWildcard(_heroTextAnimations);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// animation set up
var setup = exports.setup = function setup() {
  var _loop = function _loop(x) {
    // check if a portfolio item has been hovered on
    $(".item" + x).hover(function () {
      // if any item other than the center has been selected, transition between animation classes to move background
      if (x != 4) {
        $(".grid-container").toggleClass("item" + x + "scroll");
        $(".item4 p span").addClass("grey");
      }
      // else if the chosen is selected
      else {
          // reveal icons
          $(".item4 .unlocked").addClass("active");
          // trigger the heroText to animate
          heroText.animate();
        }
      // check if a portfolio item has been hovered out
    }, function () {
      // if any item other than the center has been selected, transition between animation classes to move background
      if (x != 4) {
        $(".grid-container").toggleClass("item" + x + "scroll");
        $(".item4 p span").removeClass("grey");
      }
      // else if the chosen is selected
      else {
          //trigger the heroText to animate
          $(".item4 .unlocked").removeClass("active");
        }
    });
  };

  // for each portfolio item
  for (var x = 0; x < $(".grid-container").children().length; x++) {
    _loop(x);
  }
}; // import heroText animations

},{"./heroTextAnimations.js":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var animate = exports.animate = function animate() {
	var _loop = function _loop(x) {
		// on hero text hover
		$(".herotext").hover(function () {
			animateLogic(this, x);
		});
		// on hero text click
		$(".herotext").click(function () {
			animateLogic(this, x);
		});
	};

	for (var x = 0; x < animationConfig.addAnimation.length; x++) {
		_loop(x);
	}
};

// declare css styles that need to be added / removed to reveal icons & animate hero text
var animationConfig = {
	addAnimation: ['animatemail', 'animatelinkedin', 'animategithub', 'animatetwitter', 'animateinstagram', 'animatepinterest'],
	removeAnimation: ['animatemail', 'animatelinkedin', 'animategithub', 'animatetwitter', 'animateinstagram', 'animatepinterest'],
	revealedIcon: ['mailrevealed', 'linkedinrevealed', 'githubrevealed', 'twitterrevealed', 'instagramrevealed', 'pinterestrevealed'],
	unlockedIcon: ['mail', 'linkedin', 'github', 'twitter', 'instagram', 'pinterest']

	// figure out how the hero text should animate based on what has already been scrolled over
};var animateLogic = function animateLogic(selected, trigger) {
	// if no icons have been revealed yet, allow mail animation to activate
	if ($(selected).hasClass("start") && trigger == 0) startAnimation(selected, trigger);
	// if all mail text has been scrolled over, allow linkedin animation to activate
	else if (trigger == 1) {
			if ($(selected).hasClass("mailrevealed") && ($(selected).hasClass("complete") || $('.start').length == 0)) startAnimation(selected, trigger);
		}
		// if the looped text has been scrolled over, allow the following animation to activate
		else if ($(selected).hasClass(animationConfig.revealedIcon[trigger - 1]) && ($(selected).hasClass("complete") || $('.' + animationConfig.revealedIcon[trigger - 2]).length == 0)) startAnimation(selected, trigger);
			// if all text has been scrolled over, reset the animation
			else if ($(selected).hasClass("pinterestrevealed") && ($(selected).hasClass("complete") || $('.instagramrevealed').length == 0)) resetAnimation(selected, 0);
};

// start the hero text animation
var startAnimation = function startAnimation(scrolled, trigger) {
	// add the 1st animation style
	$(scrolled).addClass(animationConfig.addAnimation[trigger]);
	$(scrolled).on('webkitAnimationEnd oanimationend msAnimationEnd animationend', function (e) {
		endStyles(scrolled, trigger);
	});
};

// once the hero text animation is complete, return to normal + remove css animation + unlock icon if appropriate
var endStyles = function endStyles(scrolled, trigger) {
	// remove this animation style and class
	$(scrolled).removeClass(animationConfig.removeAnimation[trigger]);
	// if already scrolled over, remove previous scrolled class
	if (trigger > 0) $(scrolled).removeClass(animationConfig.revealedIcon[trigger - 1]);
	// else remove the class that triggers the initial scroll to mail
	else $(scrolled).removeClass("start");
	// add the next animation class
	$(scrolled).addClass(animationConfig.revealedIcon[trigger]);
	// if all items have been scrolled over
	if ($('.' + animationConfig.revealedIcon[trigger]).length == $('.herotext').length - 1) {
		// if class hasn't already been unlocked
		if (!$('.item4 .' + animationConfig.unlockedIcon[trigger] + '.icon').hasClass('unlocked')) {
			// unlock new icon
			$('.item4 .' + animationConfig.unlockedIcon[trigger] + '.icon').addClass('unlocked active');
		}
	}
};

// once all animations are complete, reset to first animation
var resetAnimation = function resetAnimation(scrolled, trigger) {
	// add reset animation class
	$(scrolled).addClass("animatereset");
	// when this has finished animating
	$(scrolled).on('webkitAnimationEnd oanimationend msAnimationEnd animationend', function (e) {
		// remove animation reset and pinterest revealed classes
		$(scrolled).removeClass("animatereset pinterestrevealed");
		// if "start" class isn't already assigned to the herotext element, then add it
		if (!$(this).hasClass("start")) $(scrolled).addClass("start");
		// if "complete" class isn't already assigned to the herotext element, then add it
		if (!$(this).hasClass("complete")) $(scrolled).addClass("complete");
	});
};

// on click
var clickAnimation = function clickAnimation(clicked, count) {
	// randomise click animation
	$(clicked).addClass("animateboomarang" + count + "");
	// on animation end
	$(clicked).on('webkitAnimationEnd oanimationend msAnimationEnd animationend', function (e) {
		// remove css animation
		$(clicked).removeClass("animateboomarang" + count + "");
	});
};

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.start = start;

var _animation = require('./animation');

var animation = _interopRequireWildcard(_animation);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function start() {
	animation.setup();
} // import { content } from './content';

},{"./animation":2}]},{},[1]);
